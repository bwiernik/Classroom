[["index.html", "Programming with Data Spring 2022 About This Guide Brenton’s Notes", " Programming with Data Spring 2022 Brenton M. Wiernik 2022-01-11 About This Guide Welcome to the class guide for Programming with Data for Spring 2022! This guide organizes what we will be doing in each class meeting. So you can expect it to be updated regularly – in fact, the date listed above is the last time this guide was updated. This course was developed in part based on the resources provided by Jenny Bryan found at https://stat545.com and by Mason Garrison found at https://datascience4psych.github.io/DataScience4Psych/. A playlist of videos from Mason Garrison covering many of the topics we will explore in the course is available here. Brenton’s Notes This website is constantly changing. The source code for this website in the class [repo][course_repo]. I encourage you to contribute to the course code. If you catch typos, errors, please issue a pull request with the fixes. If you find cool/useful resources, please add them. How to use these notes This document is broken down into multiple chapters. Use the table of contents on the left side of the screen to navigate, and use the hamburger icon (horizontal bars) at the top of the document to open or close the table of contents. At the top of the document, you’ll see additional icons which you can click to search the document, change the size, font or color scheme of the page. The document will be updated (unpredictably) throughout the semester. Every module corresponds to a week-ish’s worth of material. Most modules are dedicated to improving a specific skill or at the very least dedicated to a specific theme. Within each module, there are embedded videos, slides, activities, labs, and tutorials. The skills developed in each module build upon skills you’ve developed in previous modules. Although these notes share some of the features of a textbook, they are neither comprehensive nor completely original. The main purpose is to give you all a set of common materials on which to draw during the course. In class, we will sometimes do things outside the notes. The idea here is that you will read the materials and try to learn from them, just as you will attend classes and try to learn from them. "],["attribution.html", "Attribution Major Attributions Additional Attributions", " Attribution This class leans heavily on other peoples’ materials and ideas. Major Attributions Mason Garrison’s Data Scientists for Psychologists course; Jenny Bryan’s (jennybryan.org) STAT 545 and Happy Git with R; Joe Rodgers’s PSY 8751 Exploratory and Graphical Data Analysis Course Mine Çetinkaya-Rundel’s Data Science in a Box. Additional Attributions Academic.io’s AWESOME DATA SCIENCE Julia Fukuyama’s EXPLORATORY DATA ANALYSIS Benjamin Soltoff’s Computing for the Social Sciences Grant McDermott’s course materials on environmental economics and data science Thomas E. Love Karl Broman EMILY SUZANNE CLARK’s Rubric for Unessays Ariel Muldoon’s tutorial on simulations "],["license.html", "License", " License This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. This information is a human-readable summary of (and not a substitute for) the license. Please see https://creativecommons.org/licenses/by-sa/4.0/legalcode for the full legal text. You are free to: Share—copy and redistribute the material in any medium or format Remix—remix, transform, and build upon the material for any purpose, even commercially. The licensor cannot revoke these freedoms as long as you follow the license terms. Under the following terms: Attribution—You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use. ShareAlike—If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original. No additional restrictions—You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits. Notices: You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation. No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material. "],["colophon.html", "Colophon", " Colophon These notes was written in bookdown inside RStudio. The website is hosted with github, The complete source is available from github. The book style was designed by Desirée De Leon. This version of the notes was built with: #&gt; Finding R package dependencies ... Done! #&gt; setting value #&gt; version R version 4.1.2 (2021-11-01) #&gt; os macOS Big Sur 10.16 #&gt; system x86_64, darwin17.0 #&gt; ui X11 #&gt; language (EN) #&gt; collate en_US.UTF-8 #&gt; ctype en_US.UTF-8 #&gt; tz UTC #&gt; date 2022-01-11 #&gt; pandoc 2.16.2 @ /usr/local/bin/ (via rmarkdown) Along with these packages: "],["getting-started.html", "Getting Started 0.1 Big Ideas 0.2 Course Modality", " Getting Started This overview is designed to orient you to the class. Programming with Data (Progdata) introduces on the principles of data science, including: data wrangling, modeling, visualization, and communication. In this class, we link those principles to psychological methods and open science practices by emphasizing exploratory analyses and description, rather than confirmatory analyses and hypotheses. Through the semester, we will work our way through many topics covered in Wickham and Grolemund’s R for Data Science text and develop proficiency with tidyverse. This class emphasizes replication and reproducibility. Progdata is a practical skilled-based class and should be useful to students aiming for academia as well as those interested in industry. Applications of these methods can be applied to a full range of psychological areas, including perception (e.g, eye-tracking data), neuroscience (e.g., visualizing neural networks), and individual differences (e.g., personality assessment). 0.1 Big Ideas This class covers the following broad five areas: Reproducibility; Replication; Robust Methods; Resplendent Visualizations; and R Programming. 0.2 Course Modality The course is designed to be flexible to fit each of your unique schedules and situations. The course is scheduled to meet in person 2 days a week. As Covid-related precautions evolve, this schedule is subject to change. The class can function fully asynchronously and remotely if needed. If you are sick, do not come to in person class meetings! All assignments and projects for the class can be completed at your own pace and are due as part of your portfolio at the end of the semester. 0.2.1 Successful Asynchronous Learning This video can help you to be a successful asynchronous learner. Much of this information comes from Northeastern University’s Tips for Taking Online Classes. 0.2.1.1 Productivity During Lockdown "],["syllabus.html", "Syllabus 0.3 Materials 0.4 Assignment Instructions 0.5 Due dates", " Syllabus You can find the class syllabus here. 0.3 Materials 0.3.1 Hardware If you have a laptop that can run R, please bring it to class. This class requires that you have access to a computer outside of class. This could be a laptop or a computer available in a campus computer lab. 0.3.2 Books and Videos In addition to class materials and lab activities, there will also be videos and sections of the book R for Data Science that will be shared to support your learning. R for Data Science text 0.3.3 Software 0.3.3.1 R and RStudio R is a free software environment for statistical computing and graphics. It compiles and runs on a wide variety of UNIX platforms, Windows, and MacOS. RStudio is a free integrated development environment (IDE), a powerful user interface or dashboard for R. 0.3.3.2 Git and Github Git is a version control system. Its original purpose was to help groups of developers work collaboratively on big software projects. Git manages the evolution of a set of files – called a repository – in a structured way. Think of it like the “Track Changes” features from Microsoft Word. Github is a free IDE and hosting service for Git. As a USF student, you should be able to access the GitHub Student Developer Pack for free. It includes a free PRO upgrade for your github account. 0.4 Assignment Instructions 0.4.1 Lab Activities Each week, there will be opportunities to practice your programming skills in guided activities and problems. You should complete these activities each week and submit them via your GitHub repository for the class. Of the 15 lab activities, you must complete 12 to earn an A grade. You may choose which activities (if any) to skip. For each lab activity, your code should (1) be able to run on any computer without user input, (2) produce the desired outcome, and (3) use clear coding style and logic so that readers can understand it 0.4.2 Peer Code Review Each week, you will be assigned to review 2 classmates’ code and provide constructive feedback. You should both (1) test the code to ensure that it produces correct output and (2) complete a code review report to provide feedback on program design, coding style, and documentation. Code reviews should be completed in a timely manner so that your classmates’ can benefit from the feedback. You may review either a lab activity or portfolio piece. You must complete 10 code reviews to earn an A grade. You may choose which assigned reviews (if any) to skip. As a class, please ensure that each person gets at least one review for each of their activities. 0.4.3 Portfolio Pieces By the end of the semester, you should also have completed 3 larger “portfolio pieces”. These pieces can be one of the following: Data analysis report: Explore and analyze a dataset of interest to you to derive useful or interesting insights. You must demonstrate the skills you are learning in the course (data wrangling, data visualization, modeling, web scraping, text mining, etc.) and present one or more key insights that can be learned from the data. Your project should demonstrate good habits with respect to reproducibility, clear coding style and logic, and effective visualization and communication. You may choose (or construct) any dataset of interest to you. If you are involved in research, please feel free to use data from these projects. Otherwise, there are many datasets available online you can work with, or you can build a dataset from the web yourself. We will explore portfolio piece ideas and potential data sources throughout the semester. Professional website: Create and deploy a website highlighting your skills, experience, and professional portfolio, as appropriate to your professional goals. Cheat sheet: Create a cheat sheet in the style of https://www.rstudio.com/resources/cheatsheets/ for a package, procedure, or workflow. For example, you could make a cheat sheet for a package we discuss in class or another package, or a cheat sheet for a common workflow or procedure for your lab group. Tutorial or other resource: Write a blog post, tutorial, or other resource teaching readers an analytic, programming, visualization, experimental, or workflow method. Shiny app: Build a Shiny app implementing a method of interest (e.g., power analysis, visualizing a certain type of data, fitting a certain type of model). At least 1 of your portfolio pieces must be a Data Analysis Report. Graduate students must complete an additional portfolio piece; this one must be a website, tutorial, or shiny app. 0.5 Due dates All course products are due by the end of the semester, but you should not wait until the last week to start on them! Spaced practice is much more effective for learning than cramming, and I can’t give you useful feedback if I only see things at the end of the semester. Aim to complete lab activities as you go and to complete a portfolio piece every few weeks. "],["welcome-to-data-science.html", "Part 1 Welcome to Data Science 1.1 Module Materials", " Part 1 Welcome to Data Science This module is designed to introduce you to some of the tools and workflow we will use in the course (and in data science and programming more broadly). Each section of this model has links to some videos related to the topic. You can find the module playlist here. Most of the slides used to make the videos in this module can be found here. 1.1 Module Materials Videos Located in the subchapters of this module Slidedecks Welcome Slides Meet the toolkit Suggested Readings All subchapters of this module, including R basics and workflow R4DS Book Introduction Data exploration Introduction Optional: Short Happy Git If Short Happy Git is too much, start with Oh My Git For more depth, Happy Git with R Activities UN Voting Covid Data Bechdal Test Oh My Git Lab Hello R "],["what-is-data-science.html", "Part 2 What is Data Science? 2.1 See for yourselves!", " Part 2 What is Data Science? You can follow along with the slides here if they do not appear below. 2.1 See for yourselves! I’ve embedded a few examples below. 2.1.1 Shiny App 2.1.2 Hans Rosling The video below is the shorter version. Hans Rosling’s 200 Countries, 200 Years, 4 Minutes - The Joy of Stats You can find a longer talk-length version below. 2.1.3 Social Media Social media contains a ton of great (and terrible examples of data science in action. These examples range from entire subreddits, such as /r/DataisBeautiful (be sure to check out the highest voted posts) to celebrity tweets about data scientists. YASSSSSSSSSS MY LOVE STEVE IS BACK!!! #KornackiThirstcontinues pic.twitter.com/ynK4D87Bhr&mdash; Leslie Jones 🦋 (@Lesdoggg) January 5, 2021 Good reasons to not be a Data Scientist:- It is a lot of work- Literally nobody will know what you&#39;re talking about- In the end, your computer will be your only real friend&mdash; 🔥 Kareem Carr 🔥 (@kareem_carr) January 22, 2021 2.1.4 Read for yourselves! Link Preview What is Data Science @ O’reilly Data scientists combine entrepreneurship with patience, the willingness to build data products incrementally, the ability to explore, and the ability to iterate over a solution. They are inherently interdiscplinary. They can tackle all aspects of a problem, from initial data collection and data conditioning to drawing conclusions. They can think outside the box to come up with new ways to view the problem, or to work with very broadly defined problems: “here’s a lot of data, what can you make from it?” What is Data Science @ Quora Data Science is a combination of a number of aspects of Data such as Technology, Algorithm development, and data interference to study the data, analyze it, and find innovative solutions to difficult problems. Basically Data Science is all about Analyzing data and driving for business growth by finding creative ways. The sexiest job of 21st century Data scientists today are akin to Wall Street “quants” of the 1980s and 1990s. In those days people with backgrounds in physics and math streamed to investment banks and hedge funds, where they could devise entirely new algorithms and data strategies. Then a variety of universities developed master’s programs in financial engineering, which churned out a second generation of talent that was more accessible to mainstream firms. The pattern was repeated later in the 1990s with search engineers, whose rarefied skills soon came to be taught in computer science programs. Wikipedia Data science is an inter-disciplinary field that uses scientific methods, processes, algorithms and systems to extract knowledge and insights from many structural and unstructured data. Data science is related to data mining, machine learning and big data. How to Become a Data Scientist Data scientists are big data wranglers, gathering and analyzing large sets of structured and unstructured data. A data scientist’s role combines computer science, statistics, and mathematics. They analyze, process, and model data then interpret the results to create actionable plans for companies and other organizations. a very short history of #datascience The story of how data scientists became sexy is mostly the story of the coupling of the mature discipline of statistics with a very young one–computer science. The term “Data Science” has emerged only recently to specifically designate a new profession that is expected to make sense of the vast stores of big data. But making sense of data has a long history and has been discussed by scientists, statisticians, librarians, computer scientists and others for years. The following timeline traces the evolution of the term “Data Science” and its use, attempts to define it, and related terms. "],["meet-our-toolbox.html", "Part 3 Meet our toolbox! 3.1 R and RStudio", " Part 3 Meet our toolbox! You can follow along with the slides here if they do not appear below. I recommend installing R, Rstudio, git, and github before starting the Bechdal activity 3.1 R and RStudio 3.1.1 Install R and RStudio &quot;https://www.youtube.com/watch?v=kVIZGCT5p9U&quot; %&gt;% embed_url() %&gt;% use_align(&quot;center&quot;) Install R, a free software environment for statistical computing and graphics from CRAN, the Comprehensive R Archive Network. I highly recommend you install a precompiled binary distribution for your operating system – use the links up at the top of the CRAN page linked above! Install RStudio’s IDE (stands for integrated development environment), a powerful user interface for R. Get the Open Source Edition of RStudio Desktop. You can run either the Preview version or the official releases available here. RStudio comes with a text editor, so there is no immediate need to install a separate stand-alone editor. RStudio can interface with Git(Hub). However, you must do all the Git(Hub) set up described elsewhere before you can take advantage of this. If you have a pre-existing installation of R and/or RStudio, I highly recommend that you reinstall both and get as current as possible. It can be considerably harder to run old software than new. When you upgrade R, you generally also need to update any packages you have installed. 3.1.2 Testing testing Do whatever is appropriate for your OS to launch RStudio. You should get a window similar to the screenshot you see here, but yours will be more boring because you haven’t written any code or made any figures yet! Put your cursor in the pane labeled Console, which is where you interact with the live R process. Create a simple object with code like x &lt;- 3 * 4 (followed by enter or return). Then inspect the x object by typing x followed by enter or return. You should see the value 12 print to screen. If yes, you’ve succeeded in installing R and RStudio. 3.1.3 Add-on packages R is an extensible system and many people share useful code they have developed as a package via CRAN and GitHub. To install a package from CRAN, for example the dplyr package for data manipulation, here is one way to do it in the R console (there are others). install.packages(&quot;dplyr&quot;, dependencies = TRUE) By including dependencies = TRUE, we are being explicit and extra-careful to install any additional packages the target package, dplyr in the example above, needs to have around. You could use the above method to install the following packages, all of which we will use: palmerpenguins, package webpage 3.1.4 Further resources The above will get your basic setup ready but here are some links if you are interested in reading a bit further. How to Use RStudio RStudio’s leads for learning R R FAQ R Installation and Administration More about add-on packages in the R Installation and Administration Manual "],["bechdal.html", "Part 4 Bechdel Activity", " Part 4 Bechdel Activity You can find the materials for the Bechdel activity here. The compiled version should look something like the following… "],["thoughtful-workflow.html", "Part 5 Thoughtful Workflow 5.1 R Markdown 5.2 Git and Github 5.3 Getting Help with R", " Part 5 Thoughtful Workflow At this point, I recommend you pause and think about your workflow. I give you permission to spend some time and energy sorting this out! It can be as or more important than learning a new R function or package. The experts don’t talk about this much, because they’ve already got a workflow; it’s something they do almost without thinking. Working through subsequent material in R Markdown documents, possibly using Git and GitHub to track and share your progress, is a great idea and will leave you more prepared for your future data analysis projects. Typing individual lines of R code is but a small part of data analysis and it pays off to think holistically about your workflow. If you want a lot more detail on workflows, you can wander over to the optional bit on r basics and workflow. 5.1 R Markdown If you are in the mood to be entertained, start the video from the beginning. But if you’d rather just get on with it, start watching at 6:52. You can follow along with the slides here if they do not appear below. R Markdown is an accessible way to create computational documents that combine prose and tables and figures produced by R code. An introductory R Markdown workflow, including how it intersects with Git, GitHub, and RStudio, is now maintained within the Happy Git site: Test drive R Markdown 5.2 Git and Github XKCD on Git First, it’s important to realize that Git and GitHub are distinct things. GitHub is an online hosting platform that provides an array of services built on top of the Git system. (Similar platforms include Bitbucket and GitLab.) Just like we don’t need Rstudio to run R code, we don’t need GitHub to use Git… But, it will make our lives so much easier. Git can be very powerful and useful, but it can also take some getting used to. In this class, we are going to work with some of its most basic functions. We will do all of our interfacing with Git using the GitHub app and website. You can follow along with the slides here if they do not appear below. 5.2.1 What is Github? 5.2.2 Git Git is a distributed Version Control System (VCS). It is a useful tool for easily tracking changes to your code, collaborating, and sharing. (Wait, what?) Okay, try this: Imagine if Dropbox and the “Track changes” feature in MS Word had a baby. Git would be that baby. In fact, it’s even better than that because Git is optimized for the things that social scientists and data scientists spend a lot of time working on (e.g. code). The learning curve is worth it – I promise you! With Git, you can track the changes you make to your project so you always have a record of what you’ve worked on and can easily revert back to an older version if need be. It also makes working with others easier -— groups of people can work together on the same project and merge their changes into one final source! GitHub is a way to use the same power of Git all online with an easy-to-use interface. It’s used across the software world and beyond to collaborate and maintain the history of projects. There’s a high probability that your favorite app, program or package is built using Git-based tools. (RStudio is a case in point.) Scientists and academic researchers are starting to use it as well. Benefits of version control and collaboration tools aside, Git(Hub) helps to operationalize the ideals of open science and reproducibility. Journals have increasingly strict requirements regarding reproducibility and data access. GH makes this easy (DOI integration, off-the-shelf licenses, etc.). I run my entire lab on GH; this entire course is running on github; these lecture notes are hosted on github… 5.3 Getting Help with R You can follow along with the slides here if they do not appear below. "],["r_basics.html", "Part 6 R basics and workflows 6.1 Basics of working with R at the command line and RStudio goodies 6.2 Workspace and working directory 6.3 Saving an R script 6.4 Script housekeeping 6.5 To do before next class", " Part 6 R basics and workflows Who is R? Why is R troubling PhD students?@AcademicChatter #AcademicTwitter&mdash; Dr. Marie Curie (@CurieDr) January 31, 2021 There is an implicit contract with computer and scripting languages. The computer will do tedious tasks for you. In return, you must be explicit in your instructions. The computer does not have the ability to extrapolate. So we have to work within the range of what it does understand. And that is where this entire course comes into play. We are learning how to communicate in a way that it does understand. So let’s begin! 6.1 Basics of working with R at the command line and RStudio goodies Launch RStudio/R. Notice the default panes: Console (entire left) Environment/History (tabbed in upper right) Files/Plots/Packages/Help (tabbed in lower right) FYI: you can change the default location of the panes, among many other things: Customizing RStudio. Go into the Console, where we interact with the live R process. Make an assignment and then inspect the object you just created: x &lt;- 3 * 4 x #&gt; [1] 12 All R statements where you create objects – “assignments” – have this form: objectName &lt;- value and in my head I hear, e.g., “x gets 12”. You will make lots of assignments. The &lt;- is more commonly used by R programmers. You can also use = instead. There are some small differences between the two, but they rarely come up. Feel free to use whichever you prefer. For typing &lt;-, try RStudio’s keyboard shortcut: Alt + - (the minus sign). Notice that RStudio auto-magically surrounds &lt;- with spaces, which demonstrates a useful code formatting practice. Code is miserable to read on a good day. Give your eyes a break and use spaces. RStudio offers many handy keyboard shortcuts. Also, Alt+Shift+K brings up a keyboard shortcut reference card. 6.1.1 Object names Object names cannot start with a digit and cannot contain certain other characters such as a comma or a space. You will be wise to adopt a convention for demarcating words in names. i_use_snake_case evenOthersUseCamelCase dont.use.periods Don’t use periods. I recommend snake_case or camelCase. Make another assignment: this_is_a_really_long_name &lt;- 2.5 To inspect this assignment, try out RStudio’s completion facility: type the first few characters, press TAB, add characters until you disambiguate, then press return. Make another assignment: brenton_rocks &lt;- 2 ^ 3 Let’s try to inspect: brentonrocks #&gt; Error in eval(expr, envir, enclos): object &#39;brentonrocks&#39; not found brent_rocks #&gt; Error in eval(expr, envir, enclos): object &#39;brent_rocks&#39; not found Here’s where that implicit contract comes in. The computer (and R) will do amazing things, if we can ask it to do those things in a way it understands. Typos matter. Case matters. Precision matters. We have to work within it’s narrow range of ability. 6.1.2 Functions R has a mind-blowing collection of built-in functions that are accessed like so: functionName(arg1 = val1, arg2 = val2, and so on) Let’s try using seq() which makes regular sequences of numbers and, while we’re at it, demo more helpful features of RStudio. Type se and hit TAB. A pop up shows you possible completions. Specify seq() by typing more to disambiguate or using the up/down arrows to select. Notice the floating tool-tip-type help that pops up, reminding you of a function’s arguments. If you want even more help, press F1 as directed to get the full documentation in the help tab of the lower right pane. Now open the parentheses and notice the automatic addition of the closing parenthesis and the placement of cursor in the middle. Type the arguments 1, 10 and hit return. RStudio also exits the parenthetical expression for you. IDEs are great. seq(1, 10) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 The above also demonstrates something about how R resolves function arguments. You can always specify in name = value form. But if you do not, R attempts to resolve by position. So above, it is assumed that we want a sequence from = 1 that goes to = 10. Because we didn’t specify step size, the default value of by in the function definition is used. In this case, the default is 1. For functions I call often, I might use this resolve by position for the first argument or maybe the first two. After that, I always use name = value. Make this assignment and notice similar help with quotation marks. yo &lt;- &quot;hello world&quot; If you just make an assignment, you don’t get to see the value, so then you’re tempted to immediately inspect. y &lt;- seq(1, 10) y #&gt; [1] 1 2 3 4 5 6 7 8 9 10 This common action can be shortened by surrounding the assignment with parentheses, which causes assignment and “print to screen” to happen. (y &lt;- seq(1, 10)) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 Not all functions have (or require) arguments: date() #&gt; [1] &quot;Tue Jan 11 04:07:02 2022&quot; Now look at your workspace – in the upper right pane. The workspace is where user-defined objects accumulate. You can also get a listing of these objects with commands: objects() #&gt; [1] &quot;all_pkgs&quot; &quot;brenton_rocks&quot; #&gt; [3] &quot;check_quietly&quot; &quot;ds4p_status&quot; #&gt; [5] &quot;ds4p_urls&quot; &quot;install_quietly&quot; #&gt; [7] &quot;pretty_install&quot; &quot;sample_no_surprises&quot; #&gt; [9] &quot;session&quot; &quot;shhh_check&quot; #&gt; [11] &quot;slide_url&quot; &quot;this_is_a_really_long_name&quot; #&gt; [13] &quot;x&quot; &quot;y&quot; #&gt; [15] &quot;yo&quot; ls() #&gt; [1] &quot;all_pkgs&quot; &quot;brenton_rocks&quot; #&gt; [3] &quot;check_quietly&quot; &quot;ds4p_status&quot; #&gt; [5] &quot;ds4p_urls&quot; &quot;install_quietly&quot; #&gt; [7] &quot;pretty_install&quot; &quot;sample_no_surprises&quot; #&gt; [9] &quot;session&quot; &quot;shhh_check&quot; #&gt; [11] &quot;slide_url&quot; &quot;this_is_a_really_long_name&quot; #&gt; [13] &quot;x&quot; &quot;y&quot; #&gt; [15] &quot;yo&quot; If you want to remove the object named y, you can do this: rm(y) To remove everything: rm(list = ls()) or click the broom in RStudio’s Environment pane. 6.2 Workspace and working directory One day you will need to quit R, go do something else and return to your analysis later. One day you will have multiple analyses going that use R and you want to keep them separate. One day you will need to bring data from the outside world into R and send numerical results and figures from R back out into the world. To handle these real life situations, you need to make two decisions: What part your analysis is “real”, i.e. will you save it as your lasting record of what happened? Where does your analysis “live”? 6.2.1 Workspace, .RData Start to quit RStudio, but don’t finish yet! Quit R/RStudio, either from the menu, using a keyboard shortcut, or by typing q() in the Console. You’ll get a prompt like this: Save workspace image to ~/.Rdata? This is offering to save your R workspace (all of the objects you made) so that you can reload them later. This seems okay, but how are you going to remember where each of those objects came from? It’s a recipe for irreproducible disaster! Let’s change some settings in RStudio to encourage a more reliable workflow. In RStudio, click Tools -&gt; Global options… In the window that pops up, on the General pane, Uncheck “Restore .RData into workspace at startup Set “Save workspace to .RData on exit” to “Never” Uncheck “Always save history (even when not saving .RData)” 6.2.2 Working directory Any process running on your computer has a notion of its “working directory”. In R, this is where R will look, by default, for files you ask it to load. It also where, by default, any files you write to disk will go. You can explicitly check your working directory with: getwd() It is also displayed at the top of the RStudio console. For right now, we will let R set its own working directory at startup. We will adopt a more reliable workflow for organizing our projects in a few weeks. You might sometimes see something like this in someone’s script. setwd(&quot;C:\\\\Users\\\\brenton\\\\Documents\\\\myCoolProject&quot;) This sets the working directory in the R session to that file path. Do not do this! It ensures that the script only works on your computer! We will explore more reliable ways to control the working directory in a few weeks. 6.3 Saving an R script Usually, we want to save the analyses we run so we can re-run them later or refer back to them. We do that with scripts. Let’s make an R script. Click File -&gt; New File -&gt; R Script. A new part of the RStudio window appears. The Script pane. Copy and paste the following code into your new script. # what do these lines do? a &lt;- 2 b &lt;- -3 sig_sq &lt;- 0.5 # what about these? x &lt;- runif(40) y &lt;- a + b * x + rnorm(40, sd = sqrt(sig_sq)) (avg_x &lt;- mean(x)) #&gt; [1] 0.442 # these lines save some output... write(avg_x, &quot;avg_x.txt&quot;) plot(x, y) abline(a, b, col = &quot;purple&quot;) dev.print(pdf, &quot;toy_line_plot.pdf&quot;) #&gt; quartz_off_screen #&gt; 2 Run the lines of your script by selecting them and clicking the Run button in RStudio or by typing Ctrl/Cmd + Shift + Enter/Return. Now let’s save the file. Click on the floppy disk to save. Give it a name ending in .R, I used toy-line.R. Now which folder the file will be saved in. By default, it will go in the current working directory. Quit RStudio. Go to the folder where you saved the file and it there. Restart RStudio. Notice that the the files you had open are restored by default. That’s helpful. Let’s change our script to make the sample size easily editable. At the top of your script, assign a new sample size to n, e.g. n &lt;- 80. Then, replace all the hard-coded 40s with n. Change some other minor-but-detectable stuff, e.g. alter the slope of the line b, the color of the line, … whatever. Practice the different ways to re-run the code: Walk through line by line by keyboard shortcut (Command + Enter) Walk line by line with the mouse (click “Run” in the upper right corner of editor pane). Select multiple lines and run using the keyboard shortcut or Run button. Visit your figure in your computer’s file system and view it to verify that the PDF is changing as you expect. Note that you have edited this figure using only code. You never clicked your mouse, typed a file name, or used the keyboard. This means that you can reproduce the figure (or change it) easily again in the future with with no head-scratching! 6.4 Script housekeeping Always save your R scripts with a .R so that your computer knows what to do with them. In R, comments start with one or more # symbols. Use them. RStudio helps you (de)comment selected lines with Ctrl+Shift+C (Windows and Linux) or Command+Shift+C (Mac). To be sure your code is doing what you expect, a good habit is to restart your R session and run your script from the top. To do that, click Session -&gt; Restart R. Try it! Avoid using the mouse for pieces of your analytical workflow, such as loading a dataset or saving a figure. Terribly important for reproducibility and for making it possible to retrospectively determine how a numerical table or PDF was actually produced (searching on local disk on filename, among .R files, will lead to the relevant script). 6.5 To do before next class Make an account on GitHub. Make your username recognizable! Please put up a profile photo or image on GitHub—it makes the class community more personable and easier to work with. Finish any in-class activities listed in today’s section of the guidebook that you didn’t get done. Install the software stack for this course, as indicated below. Optionally, register for the Student Developer Pack with GitHub for a bunch of free perks for students! 6.5.1 Software Stack Installation Install R and RStudio. R here: https://cran.r-project.org RStudio here: https://www.rstudio.com/products/rstudio/download/ Commentary on installing this stuff can be found at stat545.com: r-rstudio-install Install GitHub: https://desktop.github.com/ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
